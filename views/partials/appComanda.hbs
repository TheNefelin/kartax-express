<section class="comanda">
    <div>
        <div class="comanda-cabecera">
            {{#each negocio}}
            <img src={{logo}}>
            <label id={{id_mesa}} class="comanda-titulo">COMANDA (mesa: {{id_mesa}})</label>
            {{/each}}
            <span class="comanda-btn2">&#x2715;</span>
        </div>
        <ul class="comanda-item">
        </ul>
    </div>
    <div class="comanda-total">
        <span><strong>TOTAL: 0</strong></span>
        <button class="comanda-btn2">Hacer Pedido</button>
    </div>
</section>

<script>
    const arrItemCarrito = [];

    // agrega items al carrito y comanda
    async function addItemCarrito(idItem) {
        try {
            // la funcion llama a fetch y esta en index
            const item = await get_Item_ById(idItem);

            // se guarda de forma temporal todos los items de pedidos antes de enviarlos al back
            arrItemCarrito.push(
                {
                    id: arrItemCarrito.length + 1, 
                    idItem: item[0].id, 
                    nomItem: item[0].nombre, 
                    precio: item[0].precio, 
                }
            );

            renderItemCarrito();
        } catch (err) {
            console.log(`Error en la conexion a la API (comanda linea 24), Detalle: ${err}`);
        }
    };

    // elimina items del carrito y comanda
    function removeItemCarrito(idItem) {
        const index = arrItemCarrito.findIndex(e => e.idItem == idItem);
        arrItemCarrito.splice(index, 1);

        renderItemCarrito(arrItemCarrito);
    };

    // se renderiza la comanda con todos los items y el contador de item del carrito
    function renderItemCarrito(){
        let html = "";
        const comandaItem = document.querySelector(".comanda-item");
        comandaItem.innerHTML = html;

        // renderiza todos los items en la comanda temporal
        arrItemCarrito.forEach(e => {
            html += `
                <li>
                    <label>${e.nomItem}</label>
                    <label>
                        <label>${e.precio}</label>
                        <span id=${e.idItem} class="comanda-btn">&#x2715;</span>
                    </label>
                </li>`;
        });
        
        comandaItem.innerHTML = html;

        const comandaBtn = document.querySelectorAll(".comanda-btn");
        comandaBtn.forEach(e => {
            e.addEventListener("click", () => {
                removeItemCarrito(e.id);
            });
        });

        // se agrega la cantidad al carrito temporal
        const carritoCont = document.querySelector(".carrito-cont");
        carritoCont.textContent = arrItemCarrito.length;

        // se agrega el total al la comanda temporta
        const comandaTotal = document.querySelector(".comanda-total strong");
        comandaTotal.textContent = `TOTAL: ${arrItemCarrito.reduce((cont, valor) => cont + valor.precio, 0)}`;
    };

    // boton para cerrar la comanda
    const btnCerrarComanda = document.querySelector(".comanda-cabecera span");
    btnCerrarComanda.addEventListener("click", () => {
        const comanda =  document.querySelector(".comanda");
        comanda.classList.remove("comanda-visible");
    });

    // boton para realizar el pedido de la comanda y enviarlo al back
    const pedir = document.querySelector(".comanda-total > button");
    pedir.addEventListener("click", () => {
        const comanda =  document.querySelector(".comanda");
        comanda.classList.remove("comanda-visible");
        confirmarPedido();
    });

    // prepara la insercion de items al back
    async function confirmarPedido() {
        if (arrItemCarrito.length > 0) {
            // visibiliza el Loader
            renderLoading2.classList.add("loading-contenedor2_visible");

            const idMesa =  document.querySelector(".comanda-titulo").id;

            try {
                // por medio del idMesa obtengo el idComanda, la funcion getFectch esta en index.js
                const comanda = await get_Comanda_ByIdMesa(idMesa);

                if (comanda.length > 0) {
                    // esta funcion llama a fetch desde index
                    await post_AgregarItemAComanda({ items: arrItemCarrito, idComanda: comanda[0].id_comanda })
                        .then( async () => { 
                            // esta funcion actualiza los pedidos de la comanda activa esta en el partial appPedidosComanda
                            await getPedidosActivos();

                            // se vacia el carrito de la comanda temportal y se renderiza de nuevo
                            arrItemCarrito.length = 0;
                            renderItemCarrito()
                        }
                    );
                };
            } catch (err) {
                console.log(`Error en la conexion a la API (comanda linea 111), Detalle: ${err}`);
            } finally {
                // oculta el Loader
                renderLoading2.classList.remove("loading-contenedor2_visible");
            };
        };
    };
</script>